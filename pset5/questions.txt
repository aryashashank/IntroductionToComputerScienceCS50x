0.  What is pneumonoultramicroscopicsilicovolcanoconiosis?
Ans. It is an artificial long word said to mean a lung disease caused by inhaling very fine ash and sand dust.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
1.  According to its man page, what does getrusage do?
Ans.  getrusage - get resource usage
      getrusage() returns resource usage measures for who, which can be one of the following:

       RUSAGE_SELF
              Return resource usage statistics for the calling process, which is the sum of resources used by all threads in the process.

       RUSAGE_CHILDREN
              Return  resource  usage  statistics  for  all children of the calling process that have terminated and been waited for.  These statistics will
              include the resources used by grandchildren, and further removed descendants, if all of the intervening descendants waited on their terminated
              children.

       RUSAGE_THREAD (since Linux 2.6.26)
              Return resource usage statistics for the calling thread.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
2.  Per that same man page, how many members are in a variable of type struct rusage?
Ans. 16.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
3.  Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
Ans. before and after are pointers to heap memory location so they need to be passed by reference.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
4.  Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, convince us that you indeed understand how that function’s for loop works.
Ans. In the loop, first each word is taken, then it is checked for non-alphabetical characters character by character and non-alphabetical characters are removed.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
5.  Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?
Ans. Words containing non-alphabetical characters may be inserted.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
6.  Why do you think we declared the parameters for check and load as const?
Ans. So that they may not be changed by dictionary functions.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
7.  What data structure(s) did you use to implement your spell-checker? Be sure not to leave your answer at just "hash table," "trie," or the like. Expound on what’s inside each of your "nodes."
Ans. I used a trie to save the dictionary. Each node in the trie consists of an array of 27 blocks each of which is a pointer to another node.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
8.  How slow was your code the first time you got it working correctly?
Ans. 0.20
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
9.  What kinds of changes, if any, did you make to your code in order to improve its performance?
Ans. I changed few allocations to reduce time and memory allocation.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
10. Do you feel that your code has any bottlenecks that you were not able to chip away at?
Ans. I could not remove still reachable blocks to zero.
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------